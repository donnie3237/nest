# Dockerfile.bun

# 1. Base Stage
FROM oven/bun:1-alpine AS base
WORKDIR /usr/src/app

# 2. Dependencies Stage: ติดตั้ง Dependencies ทั้งหมดสำหรับ Build
FROM base AS dependencies
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY packages/ packages/
COPY apps/ apps/
RUN bun install

# 3. Builder Stage: Build โปรเจกต์
FROM dependencies AS builder
ARG PROJECT_NAME

# เพิ่ม PATH ของ node_modules/.bin เพื่อให้หา command 'nest' เจอ
ENV PATH /usr/src/app/node_modules/.bin:$PATH

RUN bun run --filter=${PROJECT_NAME} build

# 4. Final Runner Stage: สร้าง Image สุดท้าย
FROM base AS final
ARG PROJECT_NAME
ARG PROJECT_PATH
WORKDIR /usr/src/app

# สลับไปใช้ user 'bun'
USER bun

# คัดลอกเฉพาะ Build output จาก builder stage
COPY --from=builder --chown=bun:bun /usr/src/app/apps/${PROJECT_PATH}/dist ./dist

# คัดลอก package.json และ node_modules ที่จำเป็นสำหรับ Production
COPY --from=builder --chown=bun:bun /usr/src/app/package.json .
COPY --from=builder --chown=bun:bun /usr/src/app/pnpm-lock.yaml .
COPY --from=builder --chown=bun:bun /usr/src/app/pnpm-workspace.yaml .
COPY --from=builder --chown=bun:bun /usr/src/app/apps/ apps/
COPY --from=builder --chown=bun:bun /usr/src/app/packages/ packages/
COPY --from=builder --chown=bun:bun /usr/src/app/node_modules/ ./node_modules/

# ติดตั้งเฉพาะ Production Dependencies ใน image สุดท้าย (ถ้าต้องการ)
# หรือใช้ node_modules จาก builder stage โดยตรงก็ได้
# RUN bun install --production

ENV NODE_ENV=production

CMD ["bun", "run", "dist/main.js"]