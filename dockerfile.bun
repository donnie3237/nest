# Dockerfile.bun

# 1. Base Stage
FROM oven/bun:1-alpine AS base
WORKDIR /usr/src/app

# 2. Dependencies Stage: ติดตั้ง Dependencies ทั้งหมดสำหรับ Build
FROM base AS dependencies
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY packages/ packages/
COPY apps/ apps/

# ติดตั้งทุกอย่าง (รวม devDependencies) เพื่อให้ build ผ่าน
RUN bun install

# 3. Builder Stage: Build โปรเจกต์
FROM dependencies AS builder
ARG PROJECT_NAME
RUN bun run --filter=${PROJECT_NAME} build

# 4. Final Runner Stage: สร้าง Image สุดท้าย
FROM base AS final
ARG PROJECT_NAME
ARG PROJECT_PATH
WORKDIR /usr/src/app

# สลับไปใช้ user 'bun'
USER bun

# คัดลอกเฉพาะ build output จาก builder stage
COPY --from=builder --chown=bun:bun /usr/src/app/apps/${PROJECT_PATH}/dist ./dist

# คัดลอก package.json เพื่อติดตั้ง production dependencies
COPY --from=dependencies --chown=bun:bun /usr/src/app/package.json .
COPY --from=dependencies --chown=bun:bun /usr/src/app/pnpm-lock.yaml .
COPY --from=dependencies --chown=bun:bun /usr/src/app/pnpm-workspace.yaml .
COPY --from=dependencies --chown=bun:bun /usr/src/app/apps/ apps/
COPY --from=dependencies --chown=bun:bun /usr/src/app/packages/ packages/


# ติดตั้งเฉพาะ Production Dependencies ใน image สุดท้าย
# เพื่อให้ node_modules มีขนาดเล็กที่สุด
RUN bun install --production

ENV NODE_ENV=production

CMD ["bun", "run", "dist/main.js"]