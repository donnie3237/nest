# Dockerfile.pruned

# --- STAGE 1: Builder ---
# ใช้ Node base image เพื่อติดตั้ง pnpm และ build โปรเจกต์จาก context ที่ถูก prune แล้ว
FROM node:18-alpine AS builder

# ติดตั้ง pnpm
RUN npm install -g pnpm

WORKDIR /app
ARG PROJECT_NAME

# คัดลอกทุกอย่างจาก 'out' directory (build context) เข้ามา
# ตอนนี้ใน image จะมีโครงสร้างเป็น /app/full, /app/pnpm-lock.yaml ฯลฯ
COPY . .

# ติดตั้ง dependency ทั้งหมดที่จำเป็นจาก pnpm-lock.yaml
# pnpm จะอ่าน pnpm-workspace.yaml และติดตั้งเฉพาะส่วนที่อยู่ใน /app/full
RUN pnpm install --frozen-lockfile

# Build โปรเจกต์เป้าหมาย (pnpm จะหาเจอเพราะเราติดตั้งทุกอย่างแล้ว)
RUN pnpm run --filter=${PROJECT_NAME} build

# ลบ devDependencies ออกเพื่อลดขนาด node_modules
RUN pnpm prune --prod --filter=${PROJECT_NAME}...


# --- STAGE 2: Final Runner ---
# สลับมาใช้ Bun image เพื่อรันโปรแกรม
FROM oven/bun:1-alpine AS final

ARG PROJECT_PATH
WORKDIR /usr/src/app

# สลับไปใช้ user 'bun'
USER bun

# คัดลอกไฟล์ที่จำเป็นจาก Stage Builder
# **สังเกตว่า PATH ตอนนี้มี 'full/' นำหน้า** เพราะเรา COPY มาแบบนั้น
COPY --from=builder --chown=bun:bun /app/full/apps/${PROJECT_PATH}/dist ./dist
COPY --from=builder --chown=bun:bun /app/node_modules ./node_modules
COPY --from=builder --chown=bun:bun /app/full/apps/${PROJECT_PATH}/package.json ./package.json

ENV NODE_ENV=production

# ใช้ Bun runtime ในการรันไฟล์ JS
CMD ["bun", "run", "dist/main.js"]