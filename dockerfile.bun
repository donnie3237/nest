# Dockerfile.pruned

# --- STAGE 1: Builder ---
# ใช้ Node base image เพื่อติดตั้ง pnpm และ build โปรเจกต์อย่างถูกต้อง
FROM node:18-alpine AS builder

# ติดตั้ง pnpm
RUN npm install -g pnpm

WORKDIR /app
ARG PROJECT_NAME

# --- THE FIX for "No projects found" ---
# 1. คัดลอกไฟล์ config ของ pnpm ที่ root ก่อน
COPY pnpm-lock.yaml pnpm-workspace.yaml ./

# 2. คัดลอกโค้ดที่ prune แล้วจาก 'full/' directory เข้ามาที่ root ของ /app
# ทำให้โครงสร้างถูกต้องเป็น /app/apps, /app/packages
COPY full/ .
# --------------------------------------

# pnpm จะติดตั้ง dependency ของโปรเจกต์เป้าหมายและ dependency ย่อยๆ ทั้งหมด
RUN pnpm install --filter=${PROJECT_NAME}...

# pnpm run จะจัดการ PATH ของ nest command ให้ถูกต้องเสมอ
RUN pnpm run --filter=${PROJECT_NAME} build

# --- THE FIX for "Unknown option: 'recursive'" ---
# ลบ devDependencies ออกเพื่อลดขนาด node_modules (เอา ... ออก)
RUN pnpm prune --prod --filter=${PROJECT_NAME}


# --- STAGE 2: Final Runner ---
# สลับมาใช้ Bun image เพื่อรันโปรแกรม
FROM oven/bun:1-alpine AS final

ARG PROJECT_PATH
WORKDIR /usr/src/app

# สลับไปใช้ user 'bun'
USER bun

# คัดลอกไฟล์ที่จำเป็นจาก Stage Builder
COPY --from=builder --chown=bun:bun /app/apps/${PROJECT_PATH}/dist ./dist
COPY --from=builder --chown=bun:bun /app/node_modules ./node_modules
COPY --from=builder --chown=bun:bun /app/apps/${PROJECT_PATH}/package.json ./package.json

ENV NODE_ENV=production

# ใช้ Bun runtime ในการรันไฟล์ JS
CMD ["bun", "run", "dist/main.js"]